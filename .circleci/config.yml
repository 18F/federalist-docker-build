version: 2.1

orbs:
  aws-ecr: circleci/aws-ecr@6.12.2

jobs:
  test:
    docker:
      - image: circleci/python:3.8
    environment:
      CC_TEST_REPORTER_ID: 449ef357d9e81688685bde0dcdd348bc764d717fa6a4c9c01562bd8037ceb665      
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: pip install -r requirements-dev.txt

      - run:
          name: Flake8
          command: flake8

      - run:
          name: Bandit
          command: bandit -r src

      - run:
          name: Install cc-test-reporter
          command: |
            curl -L https://codeclimate.com/downloads/test-reporter/test-reporter-latest-linux-amd64 > ./cc-test-reporter
            chmod +x ./cc-test-reporter

      - run:
          name: CodeClimate before-build
          command: |
            ./cc-test-reporter before-build            

      - run:
          name: Pytest
          command: pytest --cov-report xml:./coverage/coverage.xml --cov-report html:./coverage --cov-report term --cov=src

      - run:
          name: CodeClimate after-build
          command: |
            ./cc-test-reporter format-coverage -t coverage.py ./coverage/coverage.xml
            ./cc-test-reporter upload-coverage || true

      - store_artifacts:
          path: ./coverage/coverage.xml

  
  build-and-deploy:
    machine: true
    parameters:
      app:
        type: string      
      image:
        type: string
      dockerfile:
        type: string
    environment:
      CF_MANIFEST: ./.cloudgov/manifest.yml    
    steps:
      - checkout

      - run:
          name: Build docker image
          command: |
            docker build -t << parameters.image >> -f << parameters.dockerfile >> .

      - when:
          condition:
            equal: [ staging, << pipeline.git.branch >> ]
          steps:
            run:
              name: Setup Staging Environment
              command: |
                echo "export REGISTRY_ACCESSKEY=$STAGING_REGISTRY_ACCESSKEY" >> $BASH_ENV
                echo "export REGISTRY_SECRETKEY=$STAGING_REGISTRY_SECRETKEY" >> $BASH_ENV
                echo "export REGISTRY_BUCKET=$STAGING_REGISTRY_BUCKET" >> $BASH_ENV
                echo "export CF_USERNAME=$CF_USERNAME_STAGING" >> $BASH_ENV
                echo "export CF_PASSWORD=$CF_PASSWORD_STAGING" >> $BASH_ENV
                echo "export CF_SPACE=staging" >> $BASH_ENV
                echo "export CF_APP=<< parameters.app >>-staging" >> $BASH_ENV
                echo "export CF_VARS_FILE=./.cloudgov/vars/staging.yml" >> $BASH_ENV     
           
      - when:
          condition:
            equal: [ main, << pipeline.git.branch >> ]
          steps:
            run:
              name: Setup Production Environment
              command: |
                echo "export REGISTRY_ACCESSKEY=$PRODUCTION_REGISTRY_ACCESSKEY" >> $BASH_ENV
                echo "export REGISTRY_SECRETKEY=$PRODUCTION_REGISTRY_SECRETKEY" >> $BASH_ENV
                echo "export REGISTRY_BUCKET=$PRODUCTION_REGISTRY_BUCKET" >> $BASH_ENV
                echo "export CF_USERNAME=$CF_USERNAME_PRODUCTION" >> $BASH_ENV
                echo "export CF_PASSWORD=$CF_PASSWORD_PRODUCTION" >> $BASH_ENV
                echo "export CF_SPACE=production" >> $BASH_ENV
                echo "export CF_APP=<< parameters.app >>" >> $BASH_ENV
                echo "export CF_VARS_FILE=./.cloudgov/vars/production.yml" >> $BASH_ENV

      - run:
          name: Run local docker registry
          command: |
            docker run -d \
            -p 5000:5000 \
            -e REGISTRY_STORAGE="s3" \
            -e REGISTRY_STORAGE_S3_ACCESSKEY="$REGISTRY_ACCESSKEY" \
            -e REGISTRY_STORAGE_S3_SECRETKEY="$REGISTRY_SECRETKEY" \
            -e REGISTRY_STORAGE_S3_BUCKET="$REGISTRY_BUCKET" \
            -e REGISTRY_STORAGE_S3_REGION="us-gov-west-1" \
            registry:2

      - run:
          name: Tag docker image as latest for registry
          command: |
            docker tag << parameters.image >> localhost:5000/<< parameters.image >>
      
      - run:
          name: Push docker image to registry
          command: |
            docker push localhost:5000/<< parameters.image >>

      - deploy:
          command: ./.cloudgov/deploy.sh


  deploy-from-ecr:
    docker:
      - image: cimg/base:stable
    parameters:
      app:
        type: string
    environment:
      CF_MANIFEST: ./.cloudgov/manifest.yml    
    steps:
      - checkout
      - run:
          name: Setup Staging Environment
          command: |
            echo "export CF_USERNAME=$CF_USERNAME_STAGING" >> $BASH_ENV
            echo "export CF_PASSWORD=$CF_PASSWORD_STAGING" >> $BASH_ENV
            echo "export CF_SPACE=staging" >> $BASH_ENV
            echo "export CF_APP=<< parameters.app >>-staging" >> $BASH_ENV
            echo "export CF_VARS_FILE=./.cloudgov/vars/staging.yml" >> $BASH_ENV     
           
      # - when:
      #     condition:
      #       equal: [ main, << pipeline.git.branch >> ]
      #     steps:
      #       run:
      #         name: Setup Production Environment
      #         command: |
      #           echo "export CF_USERNAME=$CF_USERNAME_PRODUCTION" >> $BASH_ENV
      #           echo "export CF_PASSWORD=$CF_PASSWORD_PRODUCTION" >> $BASH_ENV
      #           echo "export CF_SPACE=production" >> $BASH_ENV
      #           echo "export CF_APP=<< parameters.app >>" >> $BASH_ENV
      #           echo "export CF_VARS_FILE=./.cloudgov/vars/production.yml" >> $BASH_ENV

      - run:
          name: Deploy to cloud.gov
          command: |
            echo "export CF_DOCKER_PASSWORD=$AWS_ECR_READ_SECRET" >> $BASH_ENV
            ./.cloudgov/deploy.sh


workflows:
  version: 2
  build-test-deploy:
    jobs:
      - test
      - build-and-deploy:
          app: federalist-build-container
          image: federalist-garden-build
          dockerfile: Dockerfile
          requires:
            - test
          filters:
            branches:
              only:
                - main
      - build-and-deploy:
          app: federalist-build-container-exp
          image: federalist-garden-build-exp
          dockerfile: Dockerfile-exp
          requires:
            - test
          filters:
            branches:
              only:
                - main

      - aws-ecr/build-and-push-image:
          account-url: AWS_ECR_URL
          aws-access-key-id: AWS_ECR_WRITE_KEY
          aws-secret-access-key: AWS_ECR_WRITE_SECRET
          dockerfile: Dockerfile
          region: AWS_ECR_REGION
          repo: federalist/garden-build
          tag: staging
          requires:
            - test
          filters:
            branches:
              only:
                - staging
                - dc/fix-ecr-deploy

      - deploy-from-ecr:
          app: federalist-build-container
          # account-url: AWS_ECR_URL
          # repo: federalist/garden-build
          # tag: staging
          requires:
            - aws-ecr/build-and-push-image
          filters:
            branches:
              only:
                - staging
                - dc/fix-ecr-deploy

      # - build-and-deploy-ecr:
      #     app: federalist-build-container-exp
      #     image: federalist-garden-build-exp
      #     dockerfile: Dockerfile-exp
      #     requires:
      #       - test
      #     filters:
      #       branches:
      #         only:
      #           - staging
      #           - dc/fix-ecr-deploy